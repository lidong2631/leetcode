using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Data.Linq;
using System.Data.SqlClient;
using System.ServiceModel;
using System.Xml.Linq;
using System.IO;
using System.Configuration;
using BOC.TFSA.DataAccess.L2S;
using BOC.TFSA.DataAccess.Properties;
using BOC.TFSA.DataAccess.DTO;


namespace BOC.TFSA.DataAccess
{
    public class SqlDataProvider : IDataProvider
    {
        private string connString;
        private string adjustExcel;
        private string rptDateTo;
        private bool disposed = false;
        //private TFSADataContext db1;
        //private IntPtr handle;

        public SqlDataProvider()
        {
            connString = ConfigurationManager.AppSettings.Get("connectionString");
            adjustExcel = ConfigurationManager.AppSettings.Get("ExcelFilePath");
            rptDateTo = ConfigurationManager.AppSettings.Get("REPORT_DATE_TO");
            if (string.IsNullOrEmpty(connString))
                throw new Exception("Sql connection string is null");
            //db1 = new TFSADataContext(connString);

        }

        //public SqlDataProvider(IntPtr handle)
        //{
        //    this.handle = handle;
        //}

        public DTO.ACCOUNT[] GetTFSA(string creditTransType, string debitTransType,
                                    DateTime rptDateFrom, DateTime rptDateTo, string recordStatus, string histAccount)
        {
            string CREDIT_TRANS_TYPE = creditTransType;             //*******************transfer in/out****************
            string DEBIT_TRANS_TYPE = debitTransType;
            string[] RECORD_STATUS = recordStatus.Split(',');

            DTO.ACCOUNT[] ACCOUNTS = null;
            DTO.ACCOUNT[] DEBIT_ACCOUNTS = null;
            DTO.ACCOUNT[] CREDIT_ACCOUNTS = null;
            DTO.ACCOUNT[] HISTORY_ACCOUNT = null;
            DTO.ACCOUNT[] ADJUST_ACCOUNT = null;


            using (TFSADataContext db = new TFSADataContext(connString))
            {
                db.CommandTimeout = 180;
                CREDIT_ACCOUNTS =
                    (from accts in db.MULTI_FUNDS_TRANSFER_HISTs
                     let type = accts.TRANSACTION_TYPE.ToString()
                     let record = accts.RECORD_STATUS.ToString()
                     let inputer = accts.INPUTTER.ToString()
                     where (CREDIT_TRANS_TYPE.Equals(type) || CREDIT_TRANS_TYPE.Equals(type)) &&
                     RECORD_STATUS.Contains(record) &&
                     !inputer.Contains("USRADMK001") &&
                     accts.ASOFDATE >= rptDateFrom && accts.ASOFDATE <= rptDateTo
                     orderby accts.CREDIT_ACCT_NO
                     select new DTO.ACCOUNT
                     {
                         ACCOUNT_NUMBER = accts.CREDIT_ACCT_NO
                     }).Distinct<ACCOUNT>().ToArray();

                DEBIT_ACCOUNTS =
                    (from accts in db.MULTI_FUNDS_TRANSFER_HISTs
                     let type = accts.TRANSACTION_TYPE.ToString()
                     let record = accts.RECORD_STATUS.ToString()
                     let inputer = accts.INPUTTER.ToString()
                     where (DEBIT_TRANS_TYPE.Equals(type) || DEBIT_TRANS_TYPE.Equals(type)) &&
                     RECORD_STATUS.Contains(record) &&
                     !inputer.Contains("USRADMK001") &&
                     accts.ASOFDATE >= rptDateFrom && accts.ASOFDATE <= rptDateTo
                     orderby accts.DEBIT_ACCT_NO
                     select new DTO.ACCOUNT
                     {
                         ACCOUNT_NUMBER = accts.DEBIT_ACCT_NO
                     }).Distinct<ACCOUNT>().ToArray();


                //Union Adjustment FT Transactions
                //IAdjustDataProvider getAdjustData = new AdjustDataProvider();
                //ADJUST_ACCOUNT = getAdjustData.GetAdjustTFSA(rptDateFrom, rptDateTo, adjustExcel);

                //ACCOUNTS = CREDIT_ACCOUNTS.Union(DEBIT_ACCOUNTS).Union(ADJUST_ACCOUNT).ToArray();


                HISTORY_ACCOUNT = GetTFSAFromHistory(histAccount);

                ACCOUNTS = CREDIT_ACCOUNTS.Union(DEBIT_ACCOUNTS).Union(HISTORY_ACCOUNT).ToArray();

                //ACCOUNTS = CREDIT_ACCOUNTS.Union(DEBIT_ACCOUNTS).Union(HISTORY_ACCOUNT).Union(ADJUST_ACCOUNT).ToArray();

                return ACCOUNTS;

            }
        }

        public DTO.ACCOUNT[] GetTFSAFromHistory(string histPath)
        {
            List<DTO.ACCOUNT> tfsaAccounts = new List<DTO.ACCOUNT>();
            ACCOUNT tfsaAccount = null;
            FileInfo[] tfsaFiles = null;
            tfsaFiles = GetTFSAHistFiles(histPath);

            List<String> liststring = new List<string>();
            string s;

            foreach (var item in tfsaFiles)
            {
                XElement tfsa = XElement.Load(item.DirectoryName + @"\" + item.Name);
                var tfsa_slp = tfsa.Descendants("TFSA_SLP");

                foreach (var ts in tfsa_slp)
                {
                    tfsaAccount = new ACCOUNT();
                    foreach (var ti in ts.Descendants("TFSA_IDENT"))
                    {
                        Console.WriteLine("---------------------------------------");
                        Console.WriteLine(ti.Element("tfsa_ctrct_nbr").Value);
                        Console.WriteLine(ti.Element("ctrct_trmnt_ind").Value);

                        //tfsaAccount.ACCOUNT_NUMBER = ti.Element("tfsa_ctrct_nbr").Value;
                        if (ti.Element("ctrct_trmnt_ind").Value == "N")
                        {
                            tfsaAccount.ACCOUNT_NUMBER = ti.Element("tfsa_ctrct_nbr").Value;
                            tfsaAccounts.Add(tfsaAccount);
                        }
                    }
                }
            }
            return tfsaAccounts.ToArray();
        }

        private FileInfo[] GetTFSAHistFiles(string histPath)
        {
            DirectoryInfo dir = new DirectoryInfo(histPath);

            FileInfo[] tfsaFiles = dir.GetFiles("*.xml", SearchOption.AllDirectories);

            return tfsaFiles;
        }

        public DTO.CUSTOMER GetCustomerByID(string acctID)
        {
            DTO.CUSTOMER customers = null;


            using (TFSADataContext db = new TFSADataContext(connString))
            {
                db.CommandTimeout = 180;
                customers =
                     (
                      from c in db.FTOR_CUSTOMERs
                      join a in
                          (
                          from m in db.MULTI_ACCOUNTs
                          select new { ACCOUNT_NUMBER = m.ACCOUNT_NUMBER, CUSTOMER = m.CUSTOMER, CLOSURE_DATE = m.CLOSURE_DATE, WORKING_BALANCE = m.WORKING_BALANCE, OPENING_DATE = m.OPENING_DATE, COMPANY = m.COMPANY }).Union(
                          from n in db.MULTI_ACCOUNT_HISTs
                          select new { ACCOUNT_NUMBER = n.ACCOUNT_NUMBER, CUSTOMER = n.CUSTOMER, CLOSURE_DATE = n.CLOSURE_DATE, WORKING_BALANCE = n.WORKING_BALANCE, OPENING_DATE = n.OPENING_DATE, COMPANY = n.COMPANY })
                      on c.CUSTOMER_CODE equals a.CUSTOMER
                      where a.ACCOUNT_NUMBER.Substring(0, 8) == acctID && (a.CLOSURE_DATE == null || a.CLOSURE_DATE.CompareTo(rptDateTo) > 0
                      )
                      orderby c.ID
                      select new DTO.CUSTOMER
                      {
                          ID = c.ID,
                          CUSTOMER_CODE = c.CUSTOMER_CODE,
                          SHORT_NAME = c.SHORT_NAME,
                          STREET = c.STREET,
                          INDUSTRY = c.INDUSTRY,
                          NAME_1 = c.NAME_1,
                          SECTOR = c.SECTOR,
                          TOWN_COUNTRY = c.TOWN_COUNTRY,
                          US_TAX_ID_TYP = c.US_TAX_ID_TYP,
                          US_TAX_ID = c.US_TAX_ID,
                          US_TOWN_CITY = c.US_TOWN_CITY,
                          US_ZIP_CODE = c.US_ZIP_CODE,
                          BIRTH_INCORP_DATE = c.BIRTH_INCORP_DATE,
                          RESIDENCE = c.RESIDENCE,
                          US_STATE = c.US_STATE,
                          WORKING_BALANCE = a.WORKING_BALANCE,
                          CLOSURE_DATE = a.CLOSURE_DATE,
                          OPENING_DATE = a.OPENING_DATE,
                          ACCOUNT_NUMBER = a.ACCOUNT_NUMBER.Substring(0, 8),
                          COMPANY = a.COMPANY
                      }).ToArray()[0];
                /*int recCount = db.MULTI_ACCOUNTs.Count(a => (a.ACCOUNT_NUMBER == acctID));

                if (recCount > 0)
                {
                    Console.WriteLine("Open Account: " + acctID);

                    customers =
                    (from c in db.FTOR_CUSTOMERs
                     join a in db.MULTI_ACCOUNTs on c.CUSTOMER_CODE equals a.CUSTOMER
                     where a.ACCOUNT_NUMBER == acctID
                     orderby c.ID
                     select new DTO.CUSTOMER
                     {
                         ID = c.ID,
                         CUSTOMER_CODE = c.CUSTOMER_CODE,
                         SHORT_NAME = c.SHORT_NAME,
                         STREET = c.STREET,
                         INDUSTRY = c.INDUSTRY,
                         NAME_1 = c.NAME_1,
                         SECTOR = c.SECTOR,
                         TOWN_COUNTRY = c.TOWN_COUNTRY,
                         US_TAX_ID_TYP = c.US_TAX_ID_TYP,
                         US_TAX_ID = c.US_TAX_ID,
                         US_TOWN_CITY = c.US_TOWN_CITY,
                         US_ZIP_CODE = c.US_ZIP_CODE,
                         BIRTH_INCORP_DATE = c.BIRTH_INCORP_DATE,
                         RESIDENCE = c.RESIDENCE,
                         US_STATE = c.US_STATE,
                         WORKING_BALANCE = a.WORKING_BALANCE,
                         OPENING_DATE = a.OPENING_DATE,
                         ACCOUNT_NUMBER = a.ACCOUNT_NUMBER
                     }).SingleOrDefault();
                }
                else
                {
                    Console.WriteLine("Closed Account: " + acctID);
                    customers =
                     (from c in db.FTOR_CUSTOMERs
                      join a in db.MULTI_ACCOUNT_HISTs on c.CUSTOMER_CODE equals a.CUSTOMER
                      where a.ACCOUNT_NUMBER.Substring(0, 8) == acctID && a.CLOSURE_DATE != null
                      orderby c.ID
                      select new DTO.CUSTOMER
                      {
                          ID = c.ID,
                          CUSTOMER_CODE = c.CUSTOMER_CODE,
                          SHORT_NAME = c.SHORT_NAME,
                          STREET = c.STREET,
                          INDUSTRY = c.INDUSTRY,
                          NAME_1 = c.NAME_1,
                          SECTOR = c.SECTOR,
                          TOWN_COUNTRY = c.TOWN_COUNTRY,
                          US_TAX_ID_TYP = c.US_TAX_ID_TYP,
                          US_TAX_ID = c.US_TAX_ID,
                          US_TOWN_CITY = c.US_TOWN_CITY,
                          US_ZIP_CODE = c.US_ZIP_CODE,
                          BIRTH_INCORP_DATE = c.BIRTH_INCORP_DATE,
                          RESIDENCE = c.RESIDENCE,
                          US_STATE = c.US_STATE,
                          WORKING_BALANCE = a.WORKING_BALANCE,
                          CLOSURE_DATE = a.CLOSURE_DATE,
                          OPENING_DATE = a.OPENING_DATE,
                          ACCOUNT_NUMBER = a.ACCOUNT_NUMBER.Substring(0, 8)
                      }).ToArray()[0];
                }*/


                //customers =
                // (from c in db.FTOR_CUSTOMERs
                //  join a in db.MULTI_ACCOUNTs on c.CUSTOMER_CODE equals a.CUSTOMER
                //  where a.ACCOUNT_NUMBER == acctID
                //  orderby c.ID
                //  select new DTO.CUSTOMER
                //  {
                //      ID = c.ID,
                //      CUSTOMER_CODE = c.CUSTOMER_CODE,
                //      SHORT_NAME = c.SHORT_NAME,
                //      STREET = c.STREET,
                //      INDUSTRY = c.INDUSTRY,
                //      NAME_1 = c.NAME_1,
                //      SECTOR = c.SECTOR,
                //      TOWN_COUNTRY = c.TOWN_COUNTRY,
                //      US_TAX_ID_TYP = c.US_TAX_ID_TYP,
                //      US_TAX_ID = c.US_TAX_ID,
                //      US_TOWN_CITY = c.US_TOWN_CITY,
                //      US_ZIP_CODE = c.US_ZIP_CODE,
                //      BIRTH_INCORP_DATE = c.BIRTH_INCORP_DATE,
                //      RESIDENCE = c.RESIDENCE,
                //      US_STATE = c.US_STATE,
                //      WORKING_BALANCE = a.WORKING_BALANCE,
                //      OPENING_DATE = a.OPENING_DATE,
                //      ACCOUNT_NUMBER = a.ACCOUNT_NUMBER
                //  }).SingleOrDefault();
            }
            return customers;
        }

        public DTO.CUSTOMER[] GetClosedAccountByID(string acctID)
        {
            DTO.CUSTOMER[] customers = null;
            using (TFSADataContext db = new TFSADataContext(connString))
            {
                customers =
                 (from c in db.FTOR_CUSTOMERs
                  join a in db.MULTI_ACCOUNT_HISTs on c.CUSTOMER_CODE equals a.CUSTOMER
                  where a.ACCOUNT_NUMBER.Substring(0, 8) == acctID
                  orderby c.ID
                  select new DTO.CUSTOMER
                  {
                      ID = c.ID,
                      CUSTOMER_CODE = c.CUSTOMER_CODE,
                      SHORT_NAME = c.SHORT_NAME,
                      STREET = c.STREET,
                      INDUSTRY = c.INDUSTRY,
                      NAME_1 = c.NAME_1,
                      SECTOR = c.SECTOR,
                      TOWN_COUNTRY = c.TOWN_COUNTRY,
                      US_TAX_ID_TYP = c.US_TAX_ID_TYP,
                      US_TAX_ID = c.US_TAX_ID,
                      US_TOWN_CITY = c.US_TOWN_CITY,
                      US_ZIP_CODE = c.US_ZIP_CODE,
                      BIRTH_INCORP_DATE = c.BIRTH_INCORP_DATE,
                      RESIDENCE = c.RESIDENCE,
                      US_STATE = c.US_STATE,
                      WORKING_BALANCE = a.WORKING_BALANCE,
                      CLOSURE_DATE = a.CLOSURE_DATE,
                      OPENING_DATE = a.OPENING_DATE,
                      ACCOUNT_NUMBER = a.ACCOUNT_NUMBER.Substring(0, 8)
                  }).ToArray();
            }
            return customers;
        }

        public Boolean GetCurrentYearTran(string acctID, string transType, DateTime rptDateFrom, DateTime rptDateTo, string recordStatus)
        {
            DateTime dt = new DateTime(2009, 1, 1, 0, 0, 0);
            String TransactionYear = ConfigurationManager.AppSettings.Get("TRAN_YEAR");
            string[] TRANS_TYPE = transType.Split(',');
            string[] RECORD_STATUS = recordStatus.Split(',');
            List<DTO.TRANSACTION> tfsaTrans_hist = new List<DTO.TRANSACTION>();

            using (TFSADataContext db = new TFSADataContext(connString))
            {
                db.CommandTimeout = 180;
                DTO.TRANSACTION[] transaction_hist =
                   (from t in db.MULTI_FUNDS_TRANSFER_HISTs
                    let type = t.TRANSACTION_TYPE.ToString()
                    let record = t.RECORD_STATUS.ToString()
                    let inputer = t.INPUTTER.ToString()
                    where t.ASOFDATE >= dt && t.ASOFDATE <= rptDateTo && TRANS_TYPE.Contains(type) &&
                       (t.CREDIT_ACCT_NO == acctID || t.DEBIT_ACCT_NO == acctID) &&
                       RECORD_STATUS.Contains(record) && !inputer.Contains("USRADMK001")
                    select new DTO.TRANSACTION
                    {
                        ID = t.ID,
                        CREDIT_ACCT_NO = t.CREDIT_ACCT_NO,
                        DEBIT_ACCT_NO = t.DEBIT_ACCT_NO,
                        CREDIT_AMOUNT = t.CREDIT_AMOUNT,
                        DEBIT_AMOUNT = t.DEBIT_AMOUNT,
                        TRANSACTION_TYPE = t.TRANSACTION_TYPE,
                        PROCESSING_DATE = t.PROCESSING_DATE,
                        CREDIT_VALUE_DATE = t.CREDIT_VALUE_DATE,
                        DEBIT_VALUE_DATE = t.DEBIT_VALUE_DATE,
                        ASOFDATE = t.ASOFDATE
                    }).ToArray();

                foreach (var t in transaction_hist)
                {
                    if (t.PROCESSING_DATE.Substring(0, 4).Equals(TransactionYear))
                    {
                        return true;
                    }
                }
            }
            return false;
        }



        public DTO.TRANSACTION[] GetTransByAcctID(string acctID, string transType, DateTime rptDateFrom, DateTime rptDateTo, string recordStatus)
        {
            string[] TRANS_TYPE = transType.Split(',');
            string[] RECORD_STATUS = recordStatus.Split(',');
            //DTO.TRANSACTION[] transaction = null;
            DTO.TRANSACTION[] adjustTrans = null;
            DateTime dt = new DateTime(2009, 1, 1, 0, 0, 0);
            List<DTO.TRANSACTION> tfsaTrans_hist = new List<DTO.TRANSACTION>();
            int judge = 0;

            using (TFSADataContext db = new TFSADataContext(connString))
            {
                db.CommandTimeout = 180;
                DTO.TRANSACTION[] transactions =
                    (from t in db.MULTI_FUNDS_TRANSFER_HISTs
                     let type = t.TRANSACTION_TYPE.ToString()
                     let record = t.RECORD_STATUS.ToString()
                     let inputer = t.INPUTTER.ToString()
                     where t.ASOFDATE >= rptDateFrom && t.ASOFDATE <= rptDateTo && TRANS_TYPE.Contains(type) &&
                        (t.CREDIT_ACCT_NO == acctID || t.DEBIT_ACCT_NO == acctID) &&
                        RECORD_STATUS.Contains(record) && !inputer.Contains("USRADMK001")
                     select new DTO.TRANSACTION
                     {
                         ID = t.ID,
                         CREDIT_ACCT_NO = t.CREDIT_ACCT_NO,
                         DEBIT_ACCT_NO = t.DEBIT_ACCT_NO,
                         CREDIT_AMOUNT = t.CREDIT_AMOUNT,
                         DEBIT_AMOUNT = t.DEBIT_AMOUNT,
                         TRANSACTION_TYPE = t.TRANSACTION_TYPE,
                         PROCESSING_DATE = t.PROCESSING_DATE,
                         CREDIT_VALUE_DATE = t.CREDIT_VALUE_DATE,
                         DEBIT_VALUE_DATE = t.DEBIT_VALUE_DATE,
                         ASOFDATE = t.ASOFDATE
                     }).ToArray();

                //transaction = transactions.ToArray();
                //foreach (var t in transactions)
                //Console.WriteLine("CURRENT YEAR TRAN: " + t.CREDIT_ACCT_NO + " " + t.DEBIT_ACCT_NO + " " + t.PROCESSING_DATE); 
                /*
                if (transactions[0].PROCESSING_DATE == null)
                {
                    DTO.TRANSACTION[] transaction_hist =
                        (from t in db.MULTI_FUNDS_TRANSFER_HISTs
                         let type = t.TRANSACTION_TYPE.ToString()
                         let record = t.RECORD_STATUS.ToString()
                         let inputer = t.INPUTTER.ToString()
                         where t.ASOFDATE >= dt && t.ASOFDATE <= rptDateTo && TRANS_TYPE.Contains(type) &&
                            (t.CREDIT_ACCT_NO == acctID || t.DEBIT_ACCT_NO == acctID) &&
                            RECORD_STATUS.Contains(record) && !inputer.Contains("USRADMK001")
                         select new DTO.TRANSACTION
                         {
                             ID = t.ID,
                             CREDIT_ACCT_NO = t.CREDIT_ACCT_NO,
                             DEBIT_ACCT_NO = t.DEBIT_ACCT_NO,
                             CREDIT_AMOUNT = t.CREDIT_AMOUNT,
                             DEBIT_AMOUNT = t.DEBIT_AMOUNT,
                             TRANSACTION_TYPE = t.TRANSACTION_TYPE,
                             PROCESSING_DATE = t.PROCESSING_DATE,
                             CREDIT_VALUE_DATE = t.CREDIT_VALUE_DATE,
                             DEBIT_VALUE_DATE = t.DEBIT_VALUE_DATE,
                             ASOFDATE = t.ASOFDATE
                         }).ToArray();

                    foreach (var t in transaction_hist)
                    {
                        Console.WriteLine("HISTORY TRANS " + " CREDIT_ACCT_NO: " + t.CREDIT_ACCT_NO + " DEBIT_ACCT_NO: " + t.DEBIT_ACCT_NO + " DATE: " + t.PROCESSING_DATE);
                        tfsaTrans_hist.Add(t);
                    }
                    Console.WriteLine();
                    return tfsaTrans_hist.ToArray();
                }
                //Union Adjustment FT Transactions
                //IAdjustDataProvider getAdjustData = new AdjustDataProvider();
                //adjustTrans = getAdjustData.GetAdjustFT(acctID, rptDateFrom, rptDateTo, adjustExcel);

                /*if (adjustTrans != null)
                {
                    if (transactions != null)
                    {
                        transactions = transactions.Union(adjustTrans).ToArray();
                    }
                    else
                    {
                        transactions = adjustTrans;
                    }
                    
                }*/
                /*if (transaction_hist == null)
                {
                    Console.WriteLine("-----------------------------");
                    Console.WriteLine("transaction is null!");
                    Console.WriteLine("-----------------------------");
                }
                /*foreach (var t in transaction_hist)
                {
                    if (t.PROCESSING_DATE.Substring(0, 4).Equals(TransactionDate)) {
                        judge = 1;
                        break;
                    }
                }
                if (judge == 0)
                {
                    foreach (var t in transaction_hist)
                        tfsaTrans_hist.Add(t);
                }*/

                //transaction = transaction.Union(transactions).ToArray();
                foreach (var t in transactions)
                    Console.WriteLine("Credit_acct_no: " + t.CREDIT_ACCT_NO + " Debit_acct_no: " + t.DEBIT_ACCT_NO + " Date: " + t.PROCESSING_DATE + " Credit_amout " + t.CREDIT_AMOUNT + " Debit_amount " + t.DEBIT_AMOUNT);
                Console.WriteLine();

                return transactions.ToArray();
            }
        }

        public DTO.TRANSACTION[] GetTransHistByAcctID(string acctID, string transType, DateTime rptDateFrom, DateTime rptDateTo, string recordStatus)
        {
            string[] TRANS_TYPE = transType.Split(',');
            string[] RECORD_STATUS = recordStatus.Split(',');
            //DTO.TRANSACTION[] transaction = null;
            DTO.TRANSACTION[] adjustTrans = null;
            DateTime dt = new DateTime(2009, 1, 1, 0, 0, 0);
            List<DTO.TRANSACTION> tfsaTrans_hist = new List<DTO.TRANSACTION>();
            int judge = 0;

            using (TFSADataContext db = new TFSADataContext(connString))
            {
                db.CommandTimeout = 180;
                DTO.TRANSACTION[] transactions =
                    (from t in db.MULTI_FUNDS_TRANSFER_HISTs
                     let type = t.TRANSACTION_TYPE.ToString()
                     let record = t.RECORD_STATUS.ToString()
                     let inputer = t.INPUTTER.ToString()
                     where t.ASOFDATE >= dt && t.ASOFDATE <= rptDateTo && TRANS_TYPE.Contains(type) &&
                        (t.CREDIT_ACCT_NO == acctID || t.DEBIT_ACCT_NO == acctID) &&
                        RECORD_STATUS.Contains(record) && !inputer.Contains("USRADMK001")
                     select new DTO.TRANSACTION
                     {
                         ID = t.ID,
                         CREDIT_ACCT_NO = t.CREDIT_ACCT_NO,
                         DEBIT_ACCT_NO = t.DEBIT_ACCT_NO,
                         CREDIT_AMOUNT = t.CREDIT_AMOUNT,
                         DEBIT_AMOUNT = t.DEBIT_AMOUNT,
                         TRANSACTION_TYPE = t.TRANSACTION_TYPE,
                         PROCESSING_DATE = t.PROCESSING_DATE,
                         CREDIT_VALUE_DATE = t.CREDIT_VALUE_DATE,
                         DEBIT_VALUE_DATE = t.DEBIT_VALUE_DATE,
                         ASOFDATE = t.ASOFDATE
                     }).ToArray();

                foreach (var t in transactions)
                    Console.WriteLine("HISTORY TRANS Credit_acct_no: " + t.CREDIT_ACCT_NO + " Debit_acct_no: " + t.DEBIT_ACCT_NO + " Date: " + t.PROCESSING_DATE);
                Console.WriteLine();

                return transactions.ToArray();
            }
        }

        public decimal Get_stot_cnamt(string acctID, string category)
        {
            decimal totalvalue = 0;
            using (TFSADataContext db = new TFSADataContext(connString))
            {
                db.CommandTimeout = 180;
                var q =
                    (from p in db.MULTI_MM_TFSAs
                     where p.DRAWDOWN_ACCOUNT == acctID && p.CATEGORY == category
                     select p.PRINCIPAL
                     ).ToArray();
                
                for (int i = 0; i < q.GetLength(0); i++)
                {
                    Console.WriteLine(q.GetValue(i));
                    totalvalue = totalvalue + decimal.Parse(q.GetValue(i).ToString());
                }
                Console.WriteLine("Total value from MULTI_MM is " + totalvalue);
            }
            return totalvalue;
        }

        public decimal Get_stot_cnamt2(string acctID, string category)
        {
            decimal totalvalue = 0;
            using (TFSADataContext db = new TFSADataContext(connString))
            {
                db.CommandTimeout = 180;
                var q =
                    (from p in db.MULTI_ACCOUNTs
                     where p.ACCOUNT_NUMBER == acctID && p.CATEGORY == category
                     select p.WORKING_BALANCE
                     ).ToArray();

                for (int i = 0; i < q.GetLength(0); i++)
                {
                    Console.WriteLine(q.GetValue(i));
                    totalvalue = totalvalue + decimal.Parse(q.GetValue(i).ToString());
                }
                Console.WriteLine("Total value from MULTI_ACCOUNT is " + totalvalue);
            }
            return totalvalue;
        }

        /*
        protected virtual void Dispose(bool disposing)
        {
            // Check to see if Dispose has already been called.
            if (!this.disposed)
            {
                // If disposing equals true, dispose all managed
                // and unmanaged resources.
                if (disposing)
                {
                    // Dispose managed resources.
                    db1.Dispose();
                }

                // Call the appropriate methods to clean up
                // unmanaged resources here.
                // If disposing is false,
                // only the following code is executed.
                CloseHandle(handle);
                handle = IntPtr.Zero;

                // Note disposing has been done.
                disposed = true;

            }
        }

        // Use interop to call the method necessary
        // to clean up the unmanaged resource.
        [System.Runtime.InteropServices.DllImport("Kernel32")]
        private extern static Boolean CloseHandle(IntPtr handle);

        // Use C# destructor syntax for finalization code.
        // This destructor will run only if the Dispose method
        // does not get called.
        // It gives your base class the opportunity to finalize.
        // Do not provide destructors in types derived from this class.
        ~MyResource()
        {
            // Do not re-create Dispose clean-up code here.
            // Calling Dispose(false) is optimal in terms of
            // readability and maintainability.
            Dispose(false);
        }
        
        */
    }
}