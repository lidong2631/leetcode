TFSA: 

one of my project is to develop a XML format report for Tax Free Savings Account as required by our cananda branch.

Basically it lists all the active customers' information and their funds transfer transaction for the current year

To generate the file, first use JDBC connect to SQL Server database to fetch the raw data and process and make certain change if necessary

so it is conformed to the report's requirement. Then I use DOM XML parser to build up the whole structure and put the related data into 

the XML tags. Finally validate the XML report by using predefined xsd file.




Difficult:

The hard part is how you develop the SQL query to fetch the data you want from database because each field of the report has their definition

individually. While some information like customer's name, address and birth date is quite easy you can simply get from database and there is

no need to further process it. However, there are fields like transaction amount that requires calculation and format change. In this case,

you really need to be clear about how these data is created from the business logic.



see java xml

tool eclipse, altova xmlspy editor assit to create xsd file




we put each customer in a <TFSA_SLP></TFSA_SLP> tag. Within the tag, it contains different information of a customer like customer's name,

address and TFSA transaction date. At the end we have <TFSA_SUM></TFSA_SUM> to summary all the information together.

We use DOM parser to create the XML element

use JDBC to connect to Sql server to get the data record

3 classes: Account, Customer, Transaction 
2 interfaces: DataProviderInterface, XmlDataProviderInterface
3 functions: GenerateTFSAXmlFile(GetTFSA, GetCustomerByID, GetTransByAcctID) LOAD_TFSA_SLP_IDENT LOAD_TFSA_SLP_TRANS

the whole process is like this:

read data from Sql server table MULTI_FUNDS_TRANSFER_HIST by calling GetTFSA and put results into accounts[] array

use hashtable to remove duplicate account record.

read customer information from sql server table MULTI_ACCOUNT_HIST and FTOR_CUSTOMER by calling GetCustomerByID and put results into

customers[] array.

finally read transaction information from table MULTI_FUNDS_TRANSFER by calling GetTransByID and put results into transactions[] array

add above information into the xml file

validate xml file using xsd file see java xml



<T619>
	<sbmt_ref_id>BOC-2009</sbmt_ref_id>
	<rpt_tcd>O</rpt_tcd>
	<trnmtr_nbr>MM051664</trnmtr_nbr>
	<trnmtr_tcd>1</trnmtr_tcd>
	<summ_cnt>1</summ_cnt>
	<lang_cd>E</lang_cd>
	<TRNMTR_NM>
		<l1_nm>BANK OF CHINA (CANADA)</l1_nm>
	</TRNMTR_NM>
	<TRNMTR_ADDR>
		<addr_l1_txt>396 DUNDAS STREET WEST</addr_l1_txt>
		<cty_nm>TORONTO</cty_nm>
		<prov_cd>ON</prov_cd>
		<cntry_cd>CAN</cntry_cd>
		<pstl_cd>M5T 1G7</pstl_cd>
	</TRNMTR_ADDR>
	<CNTC>
		<cntc_nm>James You</cntc_nm>
		<cntc_area_cd>416</cntc_area_cd>
		<cntc_phn_nbr>847-3580</cntc_phn_nbr>
		<cntc_email_area>JAMESYOU@CA.BOCUSA.COM</cntc_email_area>
	</CNTC>
</T619>
<Return>
	<TFSA>
		<TFSA_SLP>
			<TFSA_TRANS>
				<TRANS_DT>
					<trans_dt_yr>2009</trans_dt_yr>
					<trans_dt_mo>06</trans_dt_mo>
					<trans_dt_dy>05</trans_dt_dy>
				</TRANS_DT>
				<cnamt>5000.00</cnamt>
				<wdamt>0.00</wdamt>
			</TFSA_TRANS>
			<TFSA_IDENT>
				<bn>135961621RZ0001</bn>
				<tfsa_pln_id>05360011</tfsa_pln_id>
				<tfsa_ctrct_nbr>04010670</tfsa_ctrct_nbr>
				<tfsa_hldr_sin>542786850</tfsa_hldr_sin>
				<HLDR_NM>
					<tfsa_hldr_snm>DAI</tfsa_hldr_snm>
					<tfsa_hldr_gvn_nm>YUCAI</tfsa_hldr_gvn_nm>
				</HLDR_NM>
				<HLDR_ADDR>
					<tfsa_hldr_addr_l1_txt>17 RENWICK CRESCENT APT 418</tfsa_hldr_addr_l1_txt>
					<tfsa_hldr_cty_nm>TORONTO</tfsa_hldr_cty_nm>
					<tfsa_hldr_pvst_cd>ON</tfsa_hldr_pvst_cd>
					<tfsa_hldr_cntry_cd>CAN</tfsa_hldr_cntry_cd>
					<hldr_pstl_zip_cd>M4M 3N4</hldr_pstl_zip_cd>
				</HLDR_ADDR>
				<TFSA_HLDR_BRTH_DT>
					<tfsa_hldr_brth_dt_yr>1944</tfsa_hldr_brth_dt_yr>
					<tfsa_hldr_brth_dt_mo>09</tfsa_hldr_brth_dt_mo>
					<tfsa_hldr_brth_dt_dy>24</tfsa_hldr_brth_dt_dy>
				</TFSA_HLDR_BRTH_DT>
				<tfsa_new_ctrct_ind>Y</tfsa_new_ctrct_ind>
				<ctrct_trmnt_ind>N</ctrct_trmnt_ind>
				<cye_fmv_amt>5008.63</cye_fmv_amt>
				<stot_trans_cnt>1</stot_trans_cnt>
				<TFSA_HLDR_TAMT>
					<stot_cnamt>5000.00</stot_cnamt>
					<stot_wdamt>0.00</stot_wdamt>
					<stot_mbk_out_amt>0.00</stot_mbk_out_amt>
					<stot_mbk_in_amt>0.00</stot_mbk_in_amt>
				</TFSA_HLDR_TAMT>
				<slip_type_code>O</slip_type_code>
			</TFSA_IDENT>
		</TFSA_SLP>
		<TFSA_SUMM>
			<bn>135961621RZ0001</bn>
			<summ_tcd>O</summ_tcd>
			<rpt_yr>2009</rpt_yr>
			<tfsa_pln_id>05360011</tfsa_pln_id>
			<slp_cnt>34</slp_cnt>
			<FLR_NM>
				<l1_nm>James You</l1_nm>
			</FLR_NM>
			<FLR_ADDR>
				<addr_l1_txt>396 DUNDAS STREET WEST</addr_l1_txt>
				<cty_nm>TORONTO</cty_nm>
				<prov_cd>ON</prov_cd>
				<cntry_cd>CAN</cntry_cd>
				<pstl_cd>M5T 1G7</pstl_cd>
			</FLR_ADDR>
			<CNTC>
				<filr_cntc_snm>YOU</filr_cntc_snm>
				<filr_cntc_gvn_nm>JAMES</filr_cntc_gvn_nm>
				<cntc_area_cd>416</cntc_area_cd>
				<cntc_phn_nbr>847-3580</cntc_phn_nbr>
				<filr_cntc_ema>JAMESYOU@CA.BOCUSA.COM</filr_cntc_ema>
			</CNTC>
			<TFSA_TAMT>
				<rtot_cnamt>152930.00</rtot_cnamt>
				<rtot_wdamt>48826.30</rtot_wdamt>
				<rtot_cye_fmv_amt>31673.74</rtot_cye_fmv_amt>
			</TFSA_TAMT>
		</TFSA_SUMM>
	</TFSA>
</Return>

difficult:

select ACCOUNT_NUMBER from MULTI_FUNDS_TRANSFER_HIST
where (CREDIT_TRANS_TYPE==  || DEBIT_TRANS_TYPE== ) && RECORD_STATUS==  || INPUTER NOT LIKE '' && ASOFDATE BETWEEN 



 where t.ASOFDATE >= rptDateFrom && t.ASOFDATE <= rptDateTo && TRANS_TYPE.Contains(type) &&
                        (t.CREDIT_ACCT_NO == acctID || t.DEBIT_ACCT_NO == acctID) &&
                        RECORD_STATUS.Contains(record) && !inputer.Contains("USRADMK001")









LLR: 

Loan loss reserves are accounting entries banks make to cover estimated losses on loans due to defaults and nonpayment.

How it works/Example:

Let's assume Bank XYZ has made $10,000,000 of loans to various companies and individuals. Though Bank XYZ works very hard to ensure that it lends only to people who can repay their loans (and repay them on time), inevitably some will default, some will fall behind, and some will have to be renegotiated.

Bank XYZ knows this and estimates that 1% of its loans, or $100,000, will probably never come back to it. This $100,000 estimate is Bank XYZ's loan loss reserve, and it records this reserve as a negative number on the asset portion of its balance sheet.



This one is pretty much like the previous TFSA project except for outputting the result to access table.

To do this, first use JDBC connect to SQL Server to execute a sql stored procedure. Put the result set into a table called RMD in Sql server

read the table and calcalate balance and reserve amount for each item of each branch

finally insert data into access result table



JDBC connect access:

import java.sql.*;  
public class ConnectAccess {  
    /** 
     * 初学者请注意： 
     * 1:先建立一个access文件a1.mdb,并放在D:/下; 
     * 2:在数据库文件a1.mdb中建立一个表Table1； 
     * 3：为Table1添加一列，并插入至少一条记录； 
     * 4：本文是一个完整的类，直接拿去运行就可以。 
     */  
    public static void main(String args[]) throws Exception {  
        ConnectAccess ca=new ConnectAccess();  
        ca.ConnectAccessFile();  
        ca.ConnectAccessDataSource();  
    }  
    public void ConnectAccessFile() throws Exception   
    {  
        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");  
        /** 
         * 直接连接access文件。 
         */  
        String dbur1 = "jdbc:odbc:driver={Microsoft Access Driver (*.mdb)};DBQ=d://a1.mdb";  
        Connection conn = DriverManager.getConnection(dbur1, "username", "password");  
        Statement stmt = conn.createStatement();  
        ResultSet rs = stmt.executeQuery("select * from Table1");  
        while (rs.next()) {  
            System.out.println(rs.getString(1));  
        }  
        rs.close();  
        stmt.close();  
        conn.close();  
    }  
    public void ConnectAccessDataSource()throws Exception {  
        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");  
        /** 
         * 采用ODBC连接方式 如何建立ODBC连接？ 
         * 答：在windows下，【开始】->【控制面板】->【性能和维护】->【管理工具】->【数据源】，在数据源这里添加一个指向a1.mdb文件的数据源。 
         * 比如创建名字为dataS1 
         */  
        String dbur1 = "jdbc:odbc:dataS1";// 此为ODBC连接方式  
        Connection conn = DriverManager.getConnection(dbur1, "username", "password");  
        Statement stmt = conn.createStatement();  
        ResultSet rs = stmt.executeQuery("select * from Table1");  
        while (rs.next()) {  
            System.out.println(rs.getString(1));  
        }  
        rs.close();  
        stmt.close();  
        conn.close();  
    }  
}  




difficult: the stored procedure itself is quite hard. It requires to join different table and select data based on some specified criterion.





SSIS:

ssis package is an organized collection of connections, control flow elements, data flow elements, event handlers, variables and configurations.

basically you can assemble using the graphical design tools to implement your workflow.


difficult: the data to be uploaded is in a plain text format so at first it is hard to separate between differnt columns. I have tried to use

fixed width at first but some data field can have variant length so it is not easy to handle it in this way. At last I decide to add comma

between each column data before the file was read by the package. In the package I set comma as delimiter it can solve this problem very well.






Internet Banking:























































