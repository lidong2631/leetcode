using System;
using System.Collections.Generic;
using System.Text;
using System.Data.Sql;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Configuration;
using System.Collections;
using System.Windows.Forms;

namespace RMD
{
    public class MergeData
    {
        private Hashtable _parameterTable = new Hashtable();

        private Hashtable ParameterTable
        {
            set { _parameterTable = value; }
            get { return _parameterTable; }
        }

        public SqlDataReader GetSourceData(string queryString, string connectionString)
        {
            SqlDataReader reader = null;
            SqlConnection connection = new SqlConnection(connectionString);

            SqlCommand command = new SqlCommand(queryString, connection);
            command.CommandType = System.Data.CommandType.StoredProcedure;
            command.CommandTimeout = int.Parse(ConfigurationManager.AppSettings.Get("cmd_TimeOut"));
            command.Connection.Open();
            reader = command.ExecuteReader();

            return reader;
        }

        public OleDbDataReader GetParaTableData(string queryString, string connectionString)
        {
            OleDbDataReader reader = null;
            OleDbConnection connection = new OleDbConnection(connectionString);

            OleDbCommand command = new OleDbCommand(queryString, connection);
            command.CommandTimeout = int.Parse(ConfigurationManager.AppSettings.Get("cmd_TimeOut"));
            command.Connection.Open();
            reader = command.ExecuteReader();

            return reader;
        }

        private void ProccessData(SqlDataReader datasrcReader, GenericOLEDBClass insertReader)
        {
            int sqlRowsNum = 0;
            int accessRowsNum = 0;

            string RISK_RATING;
            string CUSTOMER_ID;
            decimal BALANCE;
            decimal LLR_WEIGHT;
            decimal RATIO;
            decimal RESERVE;
            string CATEGORY;
            string CUSTOMER_STATUS;

            while (datasrcReader.Read())
            {
                sqlRowsNum++;

                CUSTOMER_ID = datasrcReader["CUSTOMER_NO"].ToString();
                LLR_WEIGHT = Convert.ToDecimal(datasrcReader["LLR_WEIGHT"]);
                BALANCE = Convert.ToDecimal(datasrcReader["DEAL_LOCAL_BAL"]);
                RISK_RATING = datasrcReader["RISK_RATING"].ToString();
                CATEGORY = datasrcReader["CATEGORY"].ToString();
                CUSTOMER_STATUS = datasrcReader["CUSTOMER_STATUS"].ToString();

                //如果CUSTOMER在参数表中有定义，取参数表的数据来计算RESERVE，否则读取默认的参数计算RESERVE
                if (IsExitCustomerID(CUSTOMER_ID))
                {
                    string[] para = ParameterTable[CUSTOMER_ID].ToString().Split(new Char[] { '|' });
                    RATIO = Convert.ToDecimal(para[1]);
                    RESERVE = BALANCE * LLR_WEIGHT * RATIO;
                }
                else
                {
                    //如果默认的参数为空，或者不在定义的参数表中，RESERVE为0，否则读取默认值计算RESERVE
                    if (String.IsNullOrEmpty(RISK_RATING) == true || IsExitCustomerID(RISK_RATING) == false)
                    {
                        if (CATEGORY == "21069")
                        {
                            string[] para = ParameterTable[CUSTOMER_STATUS].ToString().Split(new Char[] { '|' });
                            RATIO = Convert.ToDecimal(para[1]);
                            RESERVE = BALANCE * LLR_WEIGHT * RATIO;
                        }
                        else
                        {
                            RATIO = 0m;
                            RESERVE = 0m;
                        }
                    }
                    else
                    {
                        string[] para = ParameterTable[RISK_RATING].ToString().Split(new Char[] { '|' });
                        RATIO = Convert.ToDecimal(para[1]);
                        RESERVE = BALANCE * LLR_WEIGHT * RATIO;
                    }
                }

                StringBuilder insertQuery = new StringBuilder();

                insertQuery.Append("INSERT INTO [RMD] VALUES (");
                insertQuery.Append("'" + datasrcReader["CONTACT_ID"] + "',");
                insertQuery.Append("'" + datasrcReader["CATEGORY"] + "',");
                insertQuery.Append("'" + datasrcReader["APPLICATION_ID"] + "',");
                insertQuery.Append("'" + datasrcReader["CUSTOMER_NO"] + "',");
                insertQuery.Append("'" + datasrcReader["SHORT_NAME"].ToString().Replace("'", "''") + "',");
                insertQuery.Append("'" + datasrcReader["SECTOR"] + "',");
                insertQuery.Append("'" + datasrcReader["CUSTOMER_STATUS"] + "',");
                insertQuery.Append("'" + datasrcReader["CONTINGENT_RISK"] + "',");
                insertQuery.Append("'" + datasrcReader["DEAL_LOCAL_BAL"] + "',");
                insertQuery.Append("'" + datasrcReader["COMPANY"] + "',");
                insertQuery.Append("'" + datasrcReader["LLR_PRODUCT"] + "',");
                insertQuery.Append("'" + datasrcReader["LLR_WEIGHT"] + "',");
                insertQuery.Append("'" + datasrcReader["RISK_RATING"] + "',");
                insertQuery.Append("" + RATIO + ",");
                insertQuery.Append("" + RESERVE + ",");
                insertQuery.Append("'" + datasrcReader["ASOFDATE"] + "')");

                insertReader.InsertCommand = insertQuery.ToString();

                if (insertReader.ExecuteCommand())
                {
                    accessRowsNum++;
                    //Console.WriteLine(insertQuery.ToString());
                }
                else
                {
                    //Console.WriteLine(insertQuery.ToString());
                }
            }

            insertReader.Close();

            if (datasrcReader != null)
                datasrcReader.Close();

            //define whether is successful
            //if (accessRowsNum == sqlRowsNum)
            //{
            //    MessageBox.Show("Generated data successful!" + "\n"
            //        + "Source Rows Number:" + sqlRowsNum + "\n"
            //        + "Access Rows Number:" + accessRowsNum, "Alert");
            //    return;
            //}
            //{
            //    MessageBox.Show("Generated data failed!" + "\n"
            //        + "Source Rows Number:" + sqlRowsNum + "\n"
            //        + "Access Rows Number:" + accessRowsNum, "Alert");
            //    return;
            //}

        }

        private bool IsExitCustomerID(string customerID)
        {
            bool c = false;

            if (ParameterTable.ContainsKey(customerID))
                c = true;

            return c;
        }

        /// <summary>
        /// Generate new data from Data Mart and Paramerter table.
        /// </summary>
        /// <param name="getSQLReader">Get Data from Data Mart</param>
        /// <param name="getParaReader">Get local Parameter table</param>
        /// <param name="inertReader">Init access insert command</param>
        public void GenerateData(SqlDataReader getSQLReader, OleDbDataReader getParaReader, GenericOLEDBClass insertReader)
        {
            while (getParaReader.Read())
            {
                ParameterTable.Add(getParaReader[0].ToString().Trim(), getParaReader[1].ToString().Trim() + "|" +
                    getParaReader[2].ToString().Trim());
            }

            if(getParaReader != null)
                getParaReader.Close();

            ProccessData(getSQLReader, insertReader);
        }

    }
}