1 - 100
median of two sorted arrays
zigzag conversion
regular expression matching
4Sum
divide two integers
substring with concatenation of all words
multiply strings
wildcard matching
rotate image
permutation sequence
text justification
edit distance
minimum window substring
scramble string


LinkedList:
create dummy node. get prev and next and perform reverse subroutine
Swap Nodes in Pairs
Reverse Nodes in k-Group
Reverse Linked List II

connect two list (careful need to set next to null when connect)
Partition List

two pointers separated by a distance (careful if distance is larger than linkedlist length need to mod)
to calculate LinkedList length use
int len = 1;
while (p.next != null) {
	len++;
	p = p.next;
}
Remove Nth Nodes From End of List
Rotate List



Remove Duplicate
two pointers when (elements not same or find target) set left pointer and move ahead
Remove Duplicates from Sorted Array
Remove Duplicates from Sorted List
Remove Element

Remove Duplicates from Sorted Array II

Remove Duplicates from Sorted List II



NP:
Letter Combinations of a Phone Number (helper(digits, map, 0, "", res)  HashMap)

|--Combinations 		(helper(res, n, k, 1, new ArrayList<Integer>()))
|
|--Combination Sum 	(helper(candidates, target, 0, new ArrayList<Integer>(), res))
|--Combination Sum II 	(helper(candidates, target, 0, new ArrayList<Integer>(), res))
|
|--Permutations 		(helper(nums, used, new ArrayList<Integer>(), res))
|--Permutations II 	(i > 0 && nums[i] == nums[i-1] && !used[i-1] continue)

if Valid go to next row/col
N-QUeens 			(helper(res, n, 0, colForRow), colForRow, isValid)
N-Queens II
Sudoku Solver 		(helper(board, 0, 0))

Subsets 		(List<List<Integer>> helper(S, S.length-1))
Subsets II 		(List<List<Integer>> helper(S, S.length-1, last))

Restore IP Address 	(helper(s, 0, 1, "", res))





101 - 200
Binary Tree Upside Down
Maximum Gap


if (left == null && right == null) return true;
if (left == null || right == null) return false;
if (left.val == right.val && helper(...)) return true;	
return false;
Same Tree
Symmetric Tree


Binary Tree Level Order Traversal
Binary Tree Zigzag Level Order Traversal
Binary Tree Level Order Traversal II


Converted Sorted Array to Binary Search Tree
Converted Sorted List to Binary Search Tree

Maximum Depth of Binary Tree
Minimum Depth of Binary Tree

if (root == null) ...
if (root.left == null && root.right == null && sum == root.val OR sum == 0) ...
Path Sum
Path Sum II
Sum Root to Leaf Numbers


one dimension Array/List to store information, second for loop from last to first
Pascal Triangle II
Triangle


Binary Tree Maximum Path Sum
Balanced Binary Tree


for (int i = 1; i < s.length(); i++) 
	for (int j = 0; j <= i; j++)
Palindrome Partitioning II
Word Break


Palindrome Partitioning 	(helper(s, getDict(s), 0, new ArrayList<String>(), res))
Word Break II 				(helper(s, wordDict, 0, "", res);)


(1) fast != null && fast.next != null VS (2) fast.next != null && fast.next.next != null
if you need to separate list into two use (2) if you need to find cycle use (1)
(1) Linked List Cycle
(1) Linked List Cycle II
(2) Reorder List  (use reverse linkedlist)
(2) Sort List 	(use merge 2 sorted list)


Reverse Words in a String (same as Length of Last Word)





201 - 300
Shortest Palindrome
The Skyline Problem
Basic Calculator
Basic Calculator II
Verify Preorder Sequence in Binary Search Tree
Paint House II
Alien Dictionary
Closest Binary Search Tree Value II
Expression Add Operators


while (i < nums.length) {
		if (set.contains(nums[i])) return true;
		else set.add(nums[i]);
		i++;
		if (i - j > k) set.remove(nums[j++]);
}
Contains Duplicate II
Contains Duplicate III


Isomorphic Strings
Word Pattern


Perfect Squares
Longest Increasing Subsequence


Flat 2D Vector
Zigzag Iterator
Peeking Iterator
Binary Search Tree Iterator


Find the Duplicate Number
Missing Number
First Missing Positive (1-100)








